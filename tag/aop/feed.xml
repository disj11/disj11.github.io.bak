<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://disj11.github.io/tag/aop/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://disj11.github.io/" rel="alternate" type="text/html" />
  <updated>2020-08-14T07:20:56+00:00</updated>
  <id>https://disj11.github.io/tag/aop/feed.xml</id>

  
  
  

  
    <title type="html">Life Log | </title>
  

  
    <subtitle>Record my life</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Logging - Spring AOP</title>
      <link href="https://disj11.github.io/Logging-Spring-AOP" rel="alternate" type="text/html" title="Logging - Spring AOP" />
      <published>2020-08-06T18:40:00+00:00</published>
      <updated>2020-08-06T18:40:00+00:00</updated>
      <id>https://disj11.github.io/Logging-Spring-AOP</id>
      <content type="html" xml:base="https://disj11.github.io/Logging-Spring-AOP">&lt;p&gt;AOP 를 사용하여 로그를 남기는 방법을 예제를 통해 알아보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;AspectJ 기능 활성화&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAspectJAutoProxy&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dependency 추가&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-aop&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.2.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 예제에서는 Loggable 어노테이션이 붙은 메서드만 로그를 출력할 것이므로
Loggable 어노테이션을 생성한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Loggable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aspect 생성&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggingAdvice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(com.tutorial.logging.Loggable)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pointcut()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;method invoked {} : {}() arguments : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtnObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{} : {}() Response : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rtnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rtnObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로그를 남기고 싶은 메서드에 @Loggable 어노테이션을 달면 끝.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Pointcut 사용법이 궁금하다면?
&lt;a href=&quot;https://www.baeldung.com/spring-aop-pointcut-tutorial&quot;&gt;Pointcut tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Advice 사용법이 궁금하다면?
&lt;a href=&quot;https://www.baeldung.com/spring-aop-advice-tutorial&quot;&gt;Advice tutorial&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Saturday</name>
        
        
      </author>

      

      
        <category term="Spring" />
      
        <category term="AOP" />
      

      
        <summary type="html">AOP 를 사용하여 로그를 남기는 방법을 예제를 통해 알아보자.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Spring AOP, Proxy (관점 지향 프로그래밍과 프록시)</title>
      <link href="https://disj11.github.io/Spring-AOP-Proxy" rel="alternate" type="text/html" title="Spring AOP, Proxy (관점 지향 프로그래밍과 프록시)" />
      <published>2019-11-15T12:40:00+00:00</published>
      <updated>2019-11-15T12:40:00+00:00</updated>
      <id>https://disj11.github.io/Spring-AOP-Proxy</id>
      <content type="html" xml:base="https://disj11.github.io/Spring-AOP-Proxy">&lt;h3 id=&quot;spring-aop-aspect-oriented-programming&quot;&gt;Spring AOP (Aspect Oriented Programming)&lt;/h3&gt;
&lt;p&gt;AOP(관점 지향 프로그래밍)는 문제를 해결하기 위한 관심 사항을 핵심 기능과, 공통 부분(Aspect)으로 나누어
공통적인 부분을 각각의 모듈로 만들어 활용하겠다는 것이다. 
스프링에서 사용하는 어노테이션인 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transaction&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Async&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Cacheable&lt;/code&gt; 등은 모두 이러한 AOP를 이용한 것이다.&lt;/p&gt;

&lt;p&gt;이해를 돕기위해 코드를 준비했다.
아래의 코드는 모든 메서드들의 실행 시간을 측정하기 위한 코드이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void doSomething() {
    // 시작 시간 체크 (메서드 실행시간 체크를 위한 공통 부분)
    
    // 핵심 기능 (비지니스 로직)
    
    // 끝나는 시간 체크 (메서드 실행시간 체크를 위한 공통 부분)
    // 실행 시간 체크 (메서드 실행시간 체크를 위한 공통 부분)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우리가 모든 메서드들의 실행시간을 알고 싶다고 한다면,
실제로 메서드가 하는 일인 핵심 기능과, 메서드 실행 시간을 구하기 위한 공통 부분으로 나눌 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;위의 코드의 경우,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;메서드가 실행되기 시작한 시간 구하기&lt;/li&gt;
  &lt;li&gt;메서드 핵심 기능 실행&lt;/li&gt;
  &lt;li&gt;메서드가 완료된 시간 구하기&lt;/li&gt;
  &lt;li&gt;메서드 실행이 완료된 시간 구하기&lt;/li&gt;
  &lt;li&gt;메서드 실행시간 구하기 (메서드 실행이 완료된 시간 - 메서드가 실행된 시간)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1, 2, 4, 5 번이 실행 시간을 구하기 위해 모든 메서드에 들어가야 하는 공통 부분이고,
3번은 메서드마다 구현이 달라지는 핵심 부분일 것이다.
우리는 이렇게 핵심 부분과 공통 부분을 나누고, 공통적인 부분을 모듈로 만드는 것을 AOP 라고 한다.&lt;/p&gt;

&lt;h3 id=&quot;proxy&quot;&gt;Proxy&lt;/h3&gt;
&lt;p&gt;스프링 AOP는 프록시를 이용하여 AOP를 구현하기 때문에, Proxy에 관해서 알아야 한다.
스프링은 공통 부분(Aspect) 적용 대상이 되는 객체에 대한 프록시를 만들어서 제공한다.
비지니스 로직에 접근을 할 때에는 이렇게 만들어진 프록시를 통해 간접적으로 접근하게 된다.&lt;/p&gt;

&lt;p&gt;예를들어 Controller 에서 어떤 서비스의 doSomething() 메서드를 실행한 경우,
스프링은 프록시 객체를 생성하고, 생성된 프록시에서 공통 기능을 실행 후 doSomething() 메서드를 호출하거나,
doSomething() 메서드 실행 후 공통 기능을 실행한다.&lt;/p&gt;

&lt;p&gt;이러한 프록시를 생성하기 위한 방법으로는 JDK Dynamic Proxy와 CGLIB을 이용하는 두 가지 방식이 있다.
지금부터 두 방식의 차이점을 알아보자.&lt;/p&gt;

&lt;h3 id=&quot;jdk-dynamic-proxy&quot;&gt;JDK Dynamic Proxy&lt;/h3&gt;
&lt;p&gt;자바 리플렉션 API가 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.reflect.Proxy&lt;/code&gt;를 사용하여 프록시 객체를 생성한다.
이 방식은 인터페이스를 기반으로 프록시 객체를 생성하기 때문에 &lt;strong&gt;인터페이스에 정의되어 있지 않은 메서드는 AOP가 적용되지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;cglib&quot;&gt;CGLIB&lt;/h3&gt;
&lt;p&gt;CGLIB는 인터페이스에 정의되어 있지 않더라도 프록시 객체를 생성할 수 있다.
하지만, CGLIB는 대상 클래스를 상속받아 프록시를 구현하기 때문에, &lt;strong&gt;클래스가 final인 경우에는 프록시를 생성할 수 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-aop-주의사항&quot;&gt;Spring AOP 주의사항&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;같은 클래스 내에 있는 메서드를 호출하는 경우&lt;/strong&gt; 프록시를 거쳐가지 않기 때문에, &lt;strong&gt;AOP가 적용되지 않는다.&lt;/strong&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Saturday</name>
        
        
      </author>

      

      
        <category term="Spring" />
      
        <category term="AOP" />
      
        <category term="Proxy" />
      

      
        <summary type="html">Spring AOP (Aspect Oriented Programming) AOP(관점 지향 프로그래밍)는 문제를 해결하기 위한 관심 사항을 핵심 기능과, 공통 부분(Aspect)으로 나누어 공통적인 부분을 각각의 모듈로 만들어 활용하겠다는 것이다. 스프링에서 사용하는 어노테이션인 @Transaction, @Async, @Cacheable 등은 모두 이러한 AOP를 이용한 것이다.</summary>
      

      
      
    </entry>
  
</feed>
