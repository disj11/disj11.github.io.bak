<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://disj11.github.io/tag/database/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://disj11.github.io/" rel="alternate" type="text/html" />
  <updated>2019-06-08T13:19:13+00:00</updated>
  <id>https://disj11.github.io/tag/database/feed.xml</id>

  
  
  

  
    <title type="html">Life Log | </title>
  

  
    <subtitle>Record my life</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Inverted index (역색인)</title>
      <link href="https://disj11.github.io/inverted-index" rel="alternate" type="text/html" title="Inverted index (역색인)" />
      <published>2019-04-24T16:30:00+00:00</published>
      <updated>2019-04-24T16:30:00+00:00</updated>
      <id>https://disj11.github.io/inverted-index</id>
      <content type="html" xml:base="https://disj11.github.io/inverted-index">&lt;h3 id=&quot;소개&quot;&gt;소개&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Inverted index(역방향 인덱스)는 대용량 텍스트 검색을 위해서 고안된 방법이다.
요즘 많이 사용하는 해시태그 기능을 구현하고 싶다면 역방향 인덱스 방법을 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;기존의-검색-방식&quot;&gt;기존의 검색 방식&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;WHERE =&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM DOCUMENT WHERE content = 'search text'&lt;/code&gt; &lt;br /&gt;
검색어와 정확히 일치하는 문서만 검색된다.
인덱스가 걸려있을 경우 속도는 빠를 수 있지만, 문서 결과를 거의 얻지 못한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WHERE LIKE&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM DOCUMENT WHERE content like '%search text%'&lt;/code&gt; &lt;br /&gt;
검색어가 포함되는 문서를 검색한다.
1번 보다 검색 결과가 많이 나올 순 있지만, 1번과 마찬가지로 검색어와 정확히 일치하는
문장이 포함되어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whitespace tokenizer AND&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM DOCUMENT WHERE content like '%search% and content like %text%&lt;/code&gt;
검색어의 모든 단어가 포함되는 문서를 검색한다. 2번 방식보다는 향상된 결과를 보여준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whitespace tokenizer OR&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM DOCUMENT WHERE content like '%search% and content like %text%&lt;/code&gt; &lt;br /&gt;
검색어의 단어 중 하나의 단어라도 포함되어 있는 문서를 검색한다.
1~3번의 방식 중 가장 많은 결과가 검색되지만, 하나의 단어라도 포함되어 있는 문서는 전부
검색되기 때문에 검색 결과의 정확성이 떨어질 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;기존-방식의-문제&quot;&gt;기존 방식의 문제&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;1번과 같은 검색 방식의 경우 검색 결과를 거의 얻지 못함&lt;/li&gt;
  &lt;li&gt;2~3번과 같은 경우 index를 타지 않기 때문어 검색 속도가 느림
(like 검색시 %를 앞에 넣게되는 경우 인덱스를 타지 않는다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;inverted-index&quot;&gt;Inverted index&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;위에서와 같이 기존 검색 방식은 INDEX 기능을 이용할 수 없다는 단점이 있다.
이를 극복하기 위해 단어(Term)로 인덱싱을 하는 Inverted index 방식이 고안되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inverted index는 아래의 표를 통해 쉽게 이해할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;term&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;document_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;안녕&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1,2,3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;붕어빵&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1,2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;고기&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위의 표와 같이 역색인은 키워드에 문서의 Pk와 같은 값을 매핑하여 저장하는 기술이다.
역색인 작업을 했을 때의 장점은 검색 속도가 굉장히 빨라진다는 것이다. (term에 인덱스를 사용)&lt;/p&gt;

&lt;p&gt;“안녕 붕어빵”으로 검색 하였을 시 OR 처리를 하였다고 가정한다면,
1, 2, 3번 문서가 검색된다.
여기서 좀 더 발전시켜 문서별 단어 등장 빈도수를 계산하여,
빈도가 높은 순으로 정렬 하는 등 세부적인 처리를 통해
검색 결과의 품질을 높일 수 있다.&lt;/p&gt;

&lt;p&gt;[참고 사이트] &lt;br /&gt;
&lt;a href=&quot;https://blog.lael.be/post/3056&quot; target=&quot;_blank&quot;&gt;https://blog.lael.be/post/3056&lt;/a&gt;
&lt;a href=&quot;https://needjarvis.tistory.com/345&quot; target=&quot;_blank&quot;&gt;https://needjarvis.tistory.com/345&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Saturday</name>
        
        
      </author>

      

      
        <category term="Database" />
      
        <category term="Search" />
      

      
        <summary type="html">소개 Inverted index(역방향 인덱스)는 대용량 텍스트 검색을 위해서 고안된 방법이다. 요즘 많이 사용하는 해시태그 기능을 구현하고 싶다면 역방향 인덱스 방법을 사용할 수 있다.</summary>
      

      
      
    </entry>
  
</feed>
